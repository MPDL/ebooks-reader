apply plugin: 'com.android.application'

dependencies {
    implementation 'com.android.support:appcompat-v7:26.+'
    implementation 'com.android.support:design:26.+'
    implementation 'com.android.support:support-v4:26.+'



    implementation 'com.squareup.retrofit2:converter-scalars:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.2'
    implementation 'com.squareup.okhttp3:okhttp:3.5.0'
    implementation 'com.google.dagger:dagger:2.7'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
    implementation 'io.reactivex:rxandroid:1.0.1'
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.3'
    implementation 'com.trello:rxlifecycle:1.0'
    implementation 'com.trello:rxlifecycle-android:1.0'
    implementation 'com.trello:rxlifecycle-components:1.0'

    if (file('../lib/build.gradle').isFile())
        api project(':lib')
    else
        api 'com.artifex.mupdf:viewer:1.14.0'
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "de.mpg.mpdl.ebooksreader"
        minSdkVersion 26
        targetSdkVersion 26
        versionName '1.0.0'
        versionCode 1
    }

    splits {
        abi {
            enable true
            universalApk true
        }
    }

    // Increment version code for each ABI variant
    def abiOffsets = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4,]
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def offset = abiOffsets.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (offset != null)
                output.versionCodeOverride = variant.versionCode + offset
        }
    }

    if (project.hasProperty('release_storeFile')) {
        signingConfigs {
            release {
                storeFile file(release_storeFile)
                storePassword release_storePassword
                keyAlias release_keyAlias
                keyPassword release_keyPassword
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
}
